openapi: "3.0.3"
info:
  title: Eucossa web2 2022 product service
  version: 1.0.1
tags:
  - name: Product
    description: Product item for e-commerce store
servers:
  - url: https://{username}:{port}/{basePath}
    description: The production API server
    variables:
      username:
        default: product-service
        description: eucossa web community
      port:
        enum:
          - "6200"
          - "5000"
        default: "6200"
      basePath:
        enum:
          - "api/v1"
          - "api/v2"
        default: api/v1
  - url: http://{username}:{port}/{basePath}
    description: Development server
    variables:
      username:
        default: localhost
        description: eucossa web community
      port:
        enum:
          - "6200"
          - "5000"
        default: "6200"
      basePath:
        enum:
          - "api/v1"
          - "api/v2"
        default: api/v1
paths:
  /products:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Product"
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Product name, Maximum of 6 words
                  maximum: 6
                inStock:
                  type: boolean
                  default: true
                  description: An indicator of whether a product is sold out or not
                quantity:
                  type: number
                  description: The amount of products loaded into the system and an indicator of what's left in store
                  minimum: 1
                  default: 1
                image:
                  type: string
                  format: binary
                  description: The image of product. Provide image for the product to be created
                price:
                  type: number
                  format: float
                  description: The standard price for a given product. Can be given in integer or float format(Number)
                description:
                  type: string
                  description: A string describing the product details in string format
                tags:
                  type: string

      responses:
        200:
          description: OK

    get:
      parameters:
        - name: name
          description: Product name
          in: path
          required: true
          schema:
            example:
              name: prodctx
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
                type: array
      tags:
        - Product

components:
  schemas:
    Product:
      type: object
      properties:
        name:
          type: string
          description: Product name, Maximum of 6 words
          maximum: 6
        inStock:
          type: boolean
          default: true
          description: An indicator of whether a product is sold out or not
        quantity:
          type: number
          description: The amount of products loaded into the system and an indicator of what's left in store
          minimum: 1
          default: 1
        image:
          type: string
          description: The image of product. Provide image for the product to be created
        price:
          type: number
          format: float
          description: The standard price for a given product. Can be given in integer or float format(Number)
        description:
          type: string
          description: A string describing the product details in string format
        slug_name:
          type: string
          description: >
            Product slugified name that optimizes product search, the field is created from
            the backend and is not required from the frontend, While searching this is the indexed field
            for searching
        tags:
          type: string
      required:
        - name
        - price
        - tags
        - description
    NotFoundError:
      type: object
      properties:
        code:
          type: array
          enum:
            - warning
            - error
            - info
            - debug
        statusCode:
          type: number
          default: 404
        message:
          type: string
          default: Not found
        data:
          type: object

  responses:
    NotFound:
      description: Item not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/NotFoundError"
